version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecom-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ecom-network

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: orders
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecom-network

  # Frontend Applications
  client:
    build:
      context: .
      dockerfile: apps/client/Dockerfile
    container_name: ecom-client
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    depends_on:
      - product-service
      - auth-service
    networks:
      - ecom-network

  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    container_name: ecom-admin
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    depends_on:
      - product-service
      - auth-service
    networks:
      - ecom-network

  # Backend Microservices
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: ecom-auth
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKERS=kafka:29092
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
    depends_on:
      - kafka
    networks:
      - ecom-network

  product-service:
    build:
      context: .
      dockerfile: apps/product-service/Dockerfile
    container_name: ecom-product
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=production
      - PORT=4001
      - DATABASE_URL=${DATABASE_URL}
      - KAFKA_BROKERS=kafka:29092
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    depends_on:
      - kafka
    networks:
      - ecom-network

  order-service:
    build:
      context: .
      dockerfile: apps/order-service/Dockerfile
    container_name: ecom-order
    ports:
      - "4002:4002"
    environment:
      - NODE_ENV=production
      - PORT=4002
      - MONGO_URL=mongodb://mongodb:27017/orders
      - KAFKA_BROKERS=kafka:29092
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    depends_on:
      - kafka
      - mongodb
    networks:
      - ecom-network

  payment-service:
    build:
      context: .
      dockerfile: apps/payment-service/Dockerfile
    container_name: ecom-payment
    ports:
      - "4003:4003"
    environment:
      - NODE_ENV=production
      - PORT=4003
      - KAFKA_BROKERS=kafka:29092
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    depends_on:
      - kafka
    networks:
      - ecom-network

  email-service:
    build:
      context: .
      dockerfile: apps/email-service/Dockerfile
    container_name: ecom-email
    ports:
      - "4004:4004"
    environment:
      - NODE_ENV=production
      - PORT=4004
      - KAFKA_BROKERS=kafka:29092
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      - kafka
    networks:
      - ecom-network

networks:
  ecom-network:
    driver: bridge

volumes:
  mongodb_data: